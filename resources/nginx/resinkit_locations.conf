# /etc/nginx/sites-available/resinkit_locations.conf
# Reusable location blocks for resinkit services

# Authorization subrequest function
location = /internal/auth {
    internal; # Ensures this location can only be accessed by internal Nginx requests (auth_request)

    proxy_pass http://127.0.0.1:8602/api/v1/pat/validate;
    proxy_pass_request_body off; # Don't send the original request's body to the auth endpoint
    proxy_set_header Content-Length ""; # Clear Content-Length for the auth request
    proxy_set_header X-Original-URI $request_uri; # Pass original URI to auth service
    proxy_set_header Authorization $http_authorization; # Pass client's Authorization header

    # Optional: Cache successful auth results for a short period
    proxy_cache_valid 200 10s;
}

# Route /resinkit/* to 127.0.0.1:8602/*
location /resinkit/ {
    auth_request /internal/auth; # Perform authorization check

    rewrite ^/resinkit/(.*) /$1 break; # Remove /resinkit/ prefix before proxying

    proxy_pass http://127.0.0.1:8602/;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    error_page 401 = @error401; # Handle authorization failure
}

# Route /flink_ui/* to 127.0.0.1:8081/*
location /flink_ui/ {
    auth_request /internal/auth; # Perform authorization check

    rewrite ^/flink_ui/(.*) /$1 break; # Remove /flink_ui/ prefix before proxying

    proxy_pass http://127.0.0.1:8081/;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    error_page 401 = @error401; # Handle authorization failure
}

# Route /flink_sql_gateway/* to 127.0.0.1:8083/*
location /flink_sql_gateway/ {
    auth_request /internal/auth; # Perform authorization check

    rewrite ^/flink_sql_gateway/(.*) /$1 break; # Remove /flink_sql_gateway/ prefix

    proxy_pass http://127.0.0.1:8083/;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    error_page 401 = @error401; # Handle authorization failure
}

# Route /jupyter/* to 127.0.0.1:8888/*
location /jupyter/ {
    auth_request /internal/auth; # Perform authorization check

    rewrite ^/jupyter/(.*) /$1 break; # Remove /jupyter/ prefix before proxying

    proxy_pass http://127.0.0.1:8888/;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    error_page 401 = @error401; # Handle authorization failure
}

# Custom 401 error handler
location @error401 {
    add_header Content-Type application/json; # Set content type for JSON response
    return 401 '{"error": "Unauthorized - Invalid Token"}\n';
}
